var expect = require('expect.js');
var helper = require('../lib/helper');
var constants = require('../lib/const');
var Message = require('../lib/message');
var Long = require('../lib/long');

describe('/lib/helper.js', function () {
  it('buildSystemInfoRequest should ok', function () {
    var result = new Buffer([
      0xff, 0xff, 0xff, 0xff, 0xfc, 0xfd, 0xfe, 0xff,
      0x0c, 0x00, 0x00, 0x00]);
    expect(helper.buildSystemInfoRequest()).to.eql(result);
  });

  it('md5 should ok', function () {
    var val = helper.md5("test");
    expect(val).to.be("098f6bcd4621d373cade4e832627b4f6");
  });

  it('buildAuthMessage', function () {
    var result = new Buffer([
      0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 27, 88,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00,
      0x02, 0x55, 0x73, 0x65, 0x72, 0x00, 0x05, 0x00,
      0x00, 0x00, 0x75, 0x73, 101,  0x72, 0x00, 0x02,
      0x50, 0x61, 0x73, 0x73, 119, 100, 0x00, 0x07,
      0x00, 0x00, 0x00, 0x73, 0x65, 0x63, 0x72, 0x65,
      0x74, 0x00, 0x00, 0x00]);

    var message = new Message(constants.Operation.MSG_AUTH_VERIFY_REQ);
    message.RequestID = Long.ZERO;
    var buff = helper.buildAuthMessage(message, "user", "secret", true);
    expect(buff).to.eql(result);
  });

  it('buildHeader', function () {
    var nodeId = new Buffer(12).fill(0);
    var opcode = constants.Operation.MSG_AUTH_VERIFY_REQ;
    var buf = helper.buildHeader(10, Long.ZERO, nodeId, opcode, true);
    expect(buf).to.eql(new Buffer([
      0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x1b, 0x58,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00]));
  });

  it('buildDisconnectRequest', function () {
    var buf = helper.buildDisconnectRequest(true);
    expect(buf).to.eql(new Buffer([
      0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x07, 0xd8,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00]));
  });

  it('buildKillCursorMessage', function () {
    var message = new Message(constants.Operation.OP_KILL_CONTEXT);
    message.ContextIDList = [Long.NEG_ONE];
    var buf = helper.buildKillCursorMessage(message, true);
    expect(buf).to.eql(new Buffer([
      0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x07, 0xd7,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff]));
  });

});
